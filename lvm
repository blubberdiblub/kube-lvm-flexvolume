#!/bin/sh

# Copyright 2015 The Kubernetes Authors.
# Copyright 2017 Piotr Mazurkiewicz <piotr.mazurkiewicz@sysoperator.pl>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_debug='[]'

for arg in "$@" ; do
  if _temp=$( printf -- '%s' "$_debug" | jq --argjson arg "$arg" '. + [$arg]' 2> /dev/null ) ; then
    _debug=$_temp
  else
    _debug=$( printf -- '%s' "$_debug" | jq --arg arg "$arg" '. + [$arg]' )
  fi
done

printf -- '\n%s\n' "$_debug" >> /var/log/lvm-flexvolume.log

# Required packages:
#
#  - jq
#  - thin-provisionig-tools
#
usage() {
	cat <<EOF
Invalid usage. Usage:
  $0 init
  $0 attach <json params> <nodename>
  $0 detach <mount device> <nodename>
  $0 waitforattach <mount device> <json params>
  $0 mountdevice <mount dir> <mount device> <json params>
  $0 unmountdevice <mount dir>
  $0 isattached <json params> <nodename>
EOF
	exit 1
}

ismounted() {
	MOUNT=$(findmnt -n "${MNTPATH}" 2>/dev/null | cut -d' ' -f1)
	[ "${MOUNT}" = "${MNTPATH}" ]
}

getdevice() {
	VOLUMEID=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.volumeID')
	VG=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.volumegroup')

	# LVM substitutes - with --
	VOLUMEID=$(printf -- '%s' "$VOLUMEID" | sed s/-/--/g)
	VG=$(printf -- '%s' "$VG" | sed s/-/--/g)

	DMDEV="/dev/mapper/${VG}-${VOLUMEID}"
	printf -- '%s' "$DMDEV"
}

attach() {
	JSON_PARAMS=$1
	VOLUMEID=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.volumeID')
	VG=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.volumegroup')
	THINPOOL=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.thinpool | select(type == "string")')
	SIZE=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.size')

	DMDEV=$(getdevice)
	if [ ! -b "${DMDEV}" ]; then
		if [ -n "${THINPOOL}" ]; then
			lvcreate -n "$VOLUMEID" -V "$SIZE" --thinpool "$VG/$THINPOOL" > /dev/null && created=true || created=false
		else
			lvcreate -n "$VOLUMEID" -L "$SIZE" "$VG" > /dev/null && created=true || created=false
		fi

		if ! $created; then
			jq -n --arg vol "$VG/$VOLUMEID" '{"status": "Failure", "message": ("Could not attach " + $vol)}'
			exit 1
		fi
	fi

	jq -n --arg dev "$DMDEV" '{"status": "Success", "device": $dev}'
	exit 0
}

detach() {
	jq -n '{"status": "Success"}'
	exit 0
}

waitforattach() {
	shift
	attach "$@"
}

domountdevice() {
	MNTPATH=$1
	DMDEV=$2
	FSTYPE=$(printf -- '%s' "$3" | jq -r '.["kubernetes.io/fsType"]')
	MNTOPTIONS=$(printf -- '%s' "$3" | jq -r '.mountoptions | select(type == "string")')

	if [ ! -b "${DMDEV}" ]; then
		jq -n --arg dev "$DMDEV" '{"status": "Failure", "message": ($dev + " does not exist")}'
		exit 1
	fi

	if ismounted ; then
		jq -n '{"status": "Success"}'
		exit 0
	fi

	VOLFSTYPE=$(blkid -o udev "${DMDEV}" 2>/dev/null|grep "ID_FS_TYPE"|cut -d"=" -f2)
	if [ "${VOLFSTYPE}" = "" ]; then
		if ! mkfs -t "${FSTYPE}" "${DMDEV}" >/dev/null 2>&1 ; then
			jq -n --arg fs "$FSTYPE" --arg dev "$DMDEV" '{"status": "Failure", "message": ("Failed to create fs " + $fs + " on device " + $dev)}'
			exit 1
		fi
	fi

	mkdir -p "${MNTPATH}" > /dev/null 2>&1

	if ! mount ${MNTOPTIONS:+-o "$MNTOPTIONS"} "${DMDEV}" "${MNTPATH}" > /dev/null 2>&1 ; then
		jq -n --arg dev "$DMDEV" --arg mnt "$MNTPATH" '{"status": "Failure", "message": ("Failed to mount device " + $dev + " at " + $mnt)}'
		exit 1
	fi

	jq -n '{"status": "Success"}'
	exit 0
}

unmountdevice() {
	MNTPATH=$1
	if [ ! -d "${MNTPATH}" ]; then
		jq -n '{"status": "Success"}'
		exit 0
	fi

	if ! ismounted ; then
		jq -n '{"status": "Success"}'
		exit 0
	fi

	if ! umount "${MNTPATH}" > /dev/null 2>&1 ; then
		jq -n --arg mnt "$MNTPATH" '{"status": "Failed", "message": ("Failed to unmount volume at " + $mnt)}'
		exit 1
	fi

	jq -n '{"status": "Success"}'
	exit 0
}

isattached() {
	jq -n '{"status": "Success", "attached": true}'
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	jq -n '{"status": "Success"}'
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	attach)
		attach "$@"
		;;
	detach)
		detach "$@"
		;;
	waitforattach)
		waitforattach "$@"
		;;
	mountdevice)
		domountdevice "$@"
		;;
	unmountdevice)
		unmountdevice "$@"
		;;
	isattached)
                isattached "$@"
                ;;
	*)
		jq -n '{"status": "Not supported"}'
		exit 0
esac

exit 1
