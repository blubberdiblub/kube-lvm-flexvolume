#!/bin/sh

# Copyright 2015 The Kubernetes Authors.
# Copyright 2017 Piotr Mazurkiewicz <piotr.mazurkiewicz@sysoperator.pl>
# 2019 Niels Boehm <blubberdiblub@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if [ "$1" != "_DEBUG" ] ; then
  _debug='[]'
  for _arg in "$@" ; do
    if _temp=$( printf -- '%s' "$_debug" | jq --argjson arg "$_arg" '. + [$arg]' 2> /dev/null ) ; then
      _debug=$_temp
    else
      _debug=$( printf -- '%s' "$_debug" | jq --arg arg "$_arg" '. + [$arg]' )
    fi
  done

  printf -- '\n%s\n' "$_debug" >> /var/log/lvm-flexvolume.log

  _debug=$( "$0" _DEBUG "$@" 2>&1 )
  _rc=$?

  printf -- 'return code: %d\n' "$_rc" >> /var/log/lvm-flexvolume.log

  if _temp=$( jq -n --argjson parse "$_debug" '$parse' 2> /dev/null ) ; then
    printf -- 'json result:\n%s\n' "$_temp" >> /var/log/lvm-flexvolume.log
  else
    printf -- 'invalid result:\n%s\n' "$_debug" >> /var/log/lvm-flexvolume.log
  fi

  exit "$_rc"
else
  shift
fi
done

printf -- '\n%s\n' "$_debug" >> /var/log/lvm-flexvolume.log

# Required packages:
#
#  - jq
#  - thin-provisionig-tools
#
usage() {
	cat <<EOF
Invalid usage. Usage:
  $0 init
  $0 attach <json params> <nodename>
  $0 detach <mount device> <nodename>
  $0 waitforattach <mount device> <json params>
  $0 mountdevice <mount dir> <mount device> <json params>
  $0 unmountdevice <mount dir>
  $0 isattached <json params> <nodename>
EOF
	exit 1
}

reply() {
  [ -n "$1" ] || { echo "missing status" >&2 ; exit 1 ; }

  reply_reply=$( jq -nc --arg status "$1" '{"status": $status}' )
  shift

  while [ "$#" -gt 0 ] ; do
    [ -n "$1" ] || { echo "missing key" >&2 ; exit 1 ; }

    if reply_temp=$( printf -- '%s' "$reply_reply" | jq -c --arg key "$1" --argjson value "$2" '. + {($key): $value}' 2> /dev/null ) ; then
      reply_reply=$reply_temp
    else
      reply_reply=$( printf -- '%s' "$reply_reply" | jq -c --arg key "$1" --arg value "$2" '. + {($key): $value}' )
    fi

    shift
    shift
  done

  printf -- '%s' "$reply_reply" | jq . >> /var/log/lvm-flexvolume.log
  printf -- '%s' "$reply_reply"
}

init() {
  reply Success
}

ismounted() {
	MOUNT=$(findmnt -n "${MNTPATH}" 2>/dev/null | cut -d' ' -f1)
	[ "${MOUNT}" = "${MNTPATH}" ]
}

getdevice() {
	VOLUMEID=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.volumeID')
	VG=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.volumegroup')

	# LVM substitutes - with --
	VOLUMEID=$(printf -- '%s' "$VOLUMEID" | sed s/-/--/g)
	VG=$(printf -- '%s' "$VG" | sed s/-/--/g)

	DMDEV="/dev/mapper/${VG}-${VOLUMEID}"
	printf -- '%s' "$DMDEV"
}

attach() {
	JSON_PARAMS=$1
	VOLUMEID=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.volumeID')
	VG=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.volumegroup')
	THINPOOL=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.thinpool | select(type == "string")')
	SIZE=$(printf -- '%s' "${JSON_PARAMS}" | jq -r '.size')

	DMDEV=$(getdevice)
	if [ ! -b "${DMDEV}" ]; then
		if [ -n "${THINPOOL}" ]; then
			lvcreate -n "$VOLUMEID" -V "$SIZE" --thinpool "$VG/$THINPOOL" > /dev/null && created=true || created=false
		else
			lvcreate -n "$VOLUMEID" -L "$SIZE" "$VG" > /dev/null && created=true || created=false
		fi

		if ! $created; then
      reply Failure message "Could not attach $VG/$VOLUMEID"
      exit 1
		fi
	fi

  reply Success device "$DMDEV"
}

detach() {
  reply Success
}

waitforattach() {
	shift
	attach "$@"
}

domountdevice() {
	MNTPATH=$1
	DMDEV=$2
	FSTYPE=$(printf -- '%s' "$3" | jq -r '.["kubernetes.io/fsType"]')
	MNTOPTIONS=$(printf -- '%s' "$3" | jq -r '.mountoptions | select(type == "string")')

	if [ ! -b "${DMDEV}" ]; then
    reply Failure message "$DMDEV does not exist"
    exit 1
	fi

	if ismounted ; then
    reply Success
    return 0
	fi

	VOLFSTYPE=$(blkid -o udev "${DMDEV}" 2>/dev/null|grep "ID_FS_TYPE"|cut -d"=" -f2)
	if [ "${VOLFSTYPE}" = "" ]; then
		if ! mkfs -t "${FSTYPE}" "${DMDEV}" >/dev/null 2>&1 ; then
      reply Failure message "Failed to create fs $FSTYPE on device $DMDEV"
      exit 1
		fi
	fi

	mkdir -p "${MNTPATH}" > /dev/null 2>&1

	if ! mount ${MNTOPTIONS:+-o "$MNTOPTIONS"} "${DMDEV}" "${MNTPATH}" > /dev/null 2>&1 ; then
    reply Failure message "Failed to mount device $DMDEV at $MNTPATH"
    exit 1
	fi

  reply Success
}

unmountdevice() {
	MNTPATH=$1
	if [ ! -d "${MNTPATH}" ]; then
    reply Success
    return 0
	fi

	if ! ismounted ; then
    reply Success
    return 0
	fi

	if ! umount "${MNTPATH}" > /dev/null 2>&1 ; then
    reply Failure message "Failed to unmount volume at $MNTPATH"
    exit 1
	fi

  reply Success
}

isattached() {
  reply Success attached true
}

op=$1

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
  init)
    init "$@"
    ;;
	attach)
		attach "$@"
		;;
	detach)
		detach "$@"
		;;
	waitforattach)
		waitforattach "$@"
		;;
	mountdevice)
		domountdevice "$@"
		;;
	unmountdevice)
		unmountdevice "$@"
		;;
	isattached)
    isattached "$@"
    ;;
  *)
    reply "Not supported"
    exit 1
esac

exit 0
