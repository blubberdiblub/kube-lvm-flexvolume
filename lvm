#!/bin/sh

# Copyright 2015 The Kubernetes Authors.
# Copyright 2017 Piotr Mazurkiewicz <piotr.mazurkiewicz@sysoperator.pl>
# Copyright 2019 Niels Boehm <blubberdiblub@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if [ "$1" != "_DEBUG" ] ; then
  _debug='[]'
  for _arg in "$@" ; do
    if _temp=$( printf -- '%s' "$_debug" | jq --argjson arg "$_arg" '. + [$arg]' 2> /dev/null ) ; then
      _debug=$_temp
    else
      _debug=$( printf -- '%s' "$_debug" | jq --arg arg "$_arg" '. + [$arg]' )
    fi
  done

  printf -- '\n%s\n' "$_debug" >> /var/log/lvm-flexvolume.log

  _debug=$( "$0" _DEBUG "$@" )
  _rc=$?

  printf -- 'return code: %d\n' "$_rc" >> /var/log/lvm-flexvolume.log

  if _temp=$( jq -n --argjson parse "$_debug" '$parse' 2> /dev/null ) ; then
    printf -- 'json result:\n%s\n' "$_temp" >> /var/log/lvm-flexvolume.log
  else
    printf -- 'invalid result:\n%s\n' "$_debug" >> /var/log/lvm-flexvolume.log
  fi

  printf -- '%s' "$_debug"
  exit "$_rc"
else
  shift
fi

fail_hard() {
  echo "$*" >&2
  exit 2
}

for cmd in blkid jq lvcreate mkfs mount mountpoint umount ; do
  command -v "$cmd" > /dev/null || fail_hard "missing command $cmd"
done

json_add_simple() {
  [ $# -eq 2 ] || fail_hard "json_add_simple(): takes exactly 2 arguments"

  jq -c --arg key "$1" --arg value "$2" '. + {($key): $value}' || fail_hard "json_add_simple(): jq failed"
}

json_add_json() {
  [ $# -eq 2 ] || fail_hard "json_add_json(): takes exactly 2 arguments"

  jq -c --arg key "$1" --argjson value "$2" '. + {($key): $value}' || fail_hard "json_add_json(): jq failed"
}

json_get() {
  [ $# -eq 2 ] || fail_hard "json_get(): takes exactly 2 arguments"

  jq -n -e -r --argjson parse "$1" --arg key "$2" '$parse[$key]' || fail_hard "json_get(): jq failed"
}

json_get_string() {
  [ $# -eq 2 ] || fail_hard "json_get_string(): takes exactly 2 arguments"

  jq -n -r --argjson parse "$1" --arg key "$2" '$parse[$key] | select(type=="string")' || fail_hard "json_get_string(): jq failed"
}

reply_status() {
  [ $# -eq 1 ] || fail_hard "reply_status(): takes exactly 1 argument"

  printf '{}' | json_add_simple status "$1" || fail_hard "reply_status(): building reply failed"
}

reply_simple() {
  [ $# -eq 3 ] || fail_hard "reply_simple(): takes exactly 3 arguments"

  reply_status "$1" | json_add_simple "$2" "$3" || fail_hard "reply_simple(): building reply failed"
}

reply_json() {
  [ $# -eq 3 ] || fail_hard "reply_json(): takes exactly 3 arguments"

  reply_status "$1" | json_add_json "$2" "$3" || fail_hard "reply_json(): building reply failed"
}

lv_report() {
  [ $# -eq 1 ] || fail_hard "lv_report(): takes exactly 1 argument"

  lv_report=$( lvs --select "$1" -o lv_all --reportformat json ) || return 1

  jq -n -c --argjson parse "$lv_report" '$parse["report"][]["lv"][]' || fail_hard "lv_report(): jq failed"
}

init() {
  [ $# -eq 0 ] || fail_hard "init(): takes no arguments"

  reply_json Success capabilities "$( printf '{}' | json_add_json attach true )" || fail_hard "init(): building reply failed"
}

attach() {
  [ $# -eq  2 ] || fail_hard "attach(): takes exactly 2 arguments"

  volumegroup=$( json_get "$1" volumegroup )
  thinpool=$( json_get_string "$1" thinpool )
  volumeID=$( json_get "$1" volumeID )
  size=$( json_get "$1" size )

  if lv_report=$( lv_report 'lv_full_name="'"$volumegroup/$volumeID"'"' ) ; then
    lv_uuid=$( json_get "$lv_report" lv_uuid )
    reply_simple Success device "$lv_uuid"
    return 0
  fi

  if [ -z "$thinpool" ] ; then
    lvcreate --name "$volumeID" --size "$size" -- "$volumegroup" > /dev/null 2>&1 && success=true || success=false
  else
    lvcreate --name "$volumeID" --virtualsize "$size" --thinpool "$thinpool" -- "$volumegroup" > /dev/null 2>&1 && success=true || success=false
  fi

  if ! $success ; then
    reply_simple Failure message "Could not attach $volumegroup/$volumeID"
    exit 1
  fi

  if ! lv_report=$( lv_report 'lv_full_name="'"$volumegroup/$volumeID"'"' ) ; then
    reply_simple Failure message "Could not query $volumegroup/$volumeID"
    exit 1
  fi

  lv_uuid=$( json_get "$lv_report" lv_uuid )
  reply_simple Success device "$lv_uuid"
}

waitforattach() {
  [ $# -eq  2 ] || fail_hard "waitforattach(): takes exactly 2 arguments"

  lv_uuid="$1"
  if [ -z "$lv_uuid" ] ; then
    intercept=$( attach "$2" "" ) || exit 1
    lv_uuid=$( json_get "$intercept" device )
  fi

  if ! lv_report=$( lv_report 'lv_uuid="'"$lv_uuid"'"' ) ; then
    reply_simple Failure message "Could not find volume $lv_uuid"
    exit 1
  fi

  if [ -z "$( json_get_string "$lv_report" lv_active_locally )" ] ; then
    reply_simple Failure message "Volume $lv_uuid not active locally"
    exit 1
  fi

  reply_simple Success device "$lv_uuid"
}

isattached() {
  [ $# -eq  2 ] || fail_hard "isattached(): takes exactly 2 arguments"

  volumegroup=$( json_get "$1" volumegroup )
  volumeID=$( json_get "$1" volumeID )

  if ! lv_report=$( lv_report 'lv_full_name="'"$volumegroup/$volumeID"'"' ) ; then
    reply_json Success attached false
    return 0
  fi

  if [ -z "$( json_get_string "$lv_report" lv_active_locally )" ] ; then
    reply_json Success attached false
    return 0
  fi

  reply_json Success attached true
}

detach() {
  reply_status Success
}

mountdevice() {
  [ $# -eq  3 ] || fail_hard "mountdevice(): takes exactly 3 arguments"

  if ! lv_report=$( lv_report 'lv_uuid="'"$2"'"' ) ; then
    reply_simple Failure message "Could not find volume $2"
    exit 1
  fi

  lv_dm_path=$( json_get "$lv_report" lv_dm_path )
  if [ ! -b "$lv_dm_path" ] ; then
    reply_simple Failure message "$lv_dm_path does not exist"
    exit 1
  fi

  if mountpoint -q -- "$1" ; then
    reply_status Success
    return 0
  fi

  fstype=$( json_get "$3" kubernetes.io/fsType )

  if [ -z "$( blkid --match-tag TYPE --output value --no-encoding -- "$lv_dm_path" )" ] ; then
    if ! mkfs -t "$fstype" -- "$lv_dm_path" > /dev/null 2>&1 ; then
      reply_simple Failure message "Failed to create fs $fstype on device $lv_dm_path"
      exit 1
    fi
  fi

  if ! mkdir -p -- "$1" > /dev/null 2>&1 ; then
    reply_simple Failure message "Failed to make directory $1"
    exit 1
  fi

  mountoptions=$( json_get_string "$3" mountoptions )

  if ! mount -t "$fstype" ${mountoptions:+-o "$mountoptions"} -- "$lv_dm_path" "$1" > /dev/null 2>&1 ; then
    reply_simple Failure message "Failed to mount device $lv_dm_path at $1"
    exit 1
  fi

  reply_status Success
}

unmountdevice() {
  [ $# -eq  1 ] || fail_hard "mountdevice(): takes exactly 1 argument"

  if ! mountpoint -q -- "$1" ; then
    reply_status Success
    return 0
  fi

  if ! umount -- "$1" > /dev/null 2>&1 ; then
    reply_simple Failure message "Failed to unmount volume at $1"
    exit 1
  fi

  reply_status Success
}

op=$1
shift

case "$op" in
init)          init "$@"          ;;
attach)        attach "$@"        ;;
waitforattach) waitforattach "$@" ;;
isattached)    isattached "$@"    ;;
detach)        detach "$@"        ;;
mountdevice)   mountdevice "$@"   ;;
unmountdevice) unmountdevice "$@" ;;
*)
  reply_status "Not supported"
  exit 1
esac
